You are given two non-empty linked lists representing two non-negative integers. The digits are 
stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and 
return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
PROGRAM:
class ListNode:
    def _init_(self, val=0, next=None):
        self.val = val
        self.next = next
def addTwoNumbers(l1, l2):
    dummy_head = ListNode(0)
    current = dummy_head
    carry = 0
    while l1 is not None or l2 is not None:
        x = l1.val if l1 is not None else 0
        y = l2.val if l2 is not None else 0
        total = carry + x + y
        carry = total // 10
        current.next = ListNode(total % 10)
        current = current.next
        if l1 is not None:
            l1 = l1.next
        if l2 is not None:
            l2 = l2.next
    if carry > 0:
        current.next = ListNode(carry)
    return dummy_head.next
def create_linked_list(numbers):
    dummy_head = ListNode(0)
    current = dummy_head
    for number in numbers:
        current.next = ListNode(number)
        current = current.next
    return dummy_head.next
def print_linked_list(node):
    numbers = []
    while node:
        numbers.append(node.val)
        node = node.next
    print(numbers)
l1 = create_linked_list([9,9,9,9,9,9,9,9,9])
l2 = create_linked_list([9,9,9,9])
result = addTwoNumbers(l1, l2)
print_linked_list(result)  add two numbers
